[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Orchestrator",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f51ea7d6db2bee38",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Get all authorizations",
        "query": "SELECT * FROM \"authorization\";",
        "postgreSQLConfig": "fbb8a647422d5e27",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "a57311efcd3c2fe0"
            ]
        ]
    },
    {
        "id": "11553e9093792e80",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "Get all authorizations",
        "url": "/api/authorizations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "f51ea7d6db2bee38"
            ]
        ]
    },
    {
        "id": "a57311efcd3c2fe0",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "Http response OK",
        "statusCode": "200",
        "headers": {},
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "f6e746d0ed87d203",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "Is plate authorized",
        "url": "/api/is-authorized",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "5cd484ca421cb0bd"
            ]
        ]
    },
    {
        "id": "a4a6a9ea7b33b4df",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Get all authorizations",
        "query": "SELECT * FROM \"authorization\" WHERE plate = $1;",
        "postgreSQLConfig": "fbb8a647422d5e27",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 860,
        "y": 220,
        "wires": [
            [
                "3926444cac573577"
            ]
        ]
    },
    {
        "id": "74093195494ed89e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare request",
        "func": "msg.params = [ msg.req.query.plate ];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 220,
        "wires": [
            [
                "a4a6a9ea7b33b4df"
            ]
        ]
    },
    {
        "id": "5cd484ca421cb0bd",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Has property plate",
        "property": "req.query",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "plate",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "74093195494ed89e"
            ],
            [
                "e8bff8375d336b1b"
            ]
        ]
    },
    {
        "id": "e8bff8375d336b1b",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "Http response bad request",
        "statusCode": "400",
        "headers": {},
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "3926444cac573577",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Has sql response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "ee098bb491234e8c"
            ],
            [
                "bdd0057d14224519"
            ]
        ]
    },
    {
        "id": "4a0142c965826c0f",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "Http response OK",
        "statusCode": "200",
        "headers": {},
        "x": 2790,
        "y": 280,
        "wires": []
    },
    {
        "id": "bdd0057d14224519",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare unauthorized response",
        "func": "msg.payload = {\n    plate: msg.params[0],\n    authorized: false\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 280,
        "wires": [
            [
                "4a0142c965826c0f"
            ]
        ]
    },
    {
        "id": "ee098bb491234e8c",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Check valid date",
        "func": "// Convert SQL date string to Date object\nconst sqlDate = new Date(msg.payload[0].expiration);\n\n// Get current date\nconst currentDate = new Date();\n\n// Compare dates\nif (sqlDate.getTime() > currentDate.getTime()) {\n    msg.payload[0].dateValid = true;\n} else if (sqlDate.getTime() < currentDate.getTime()) {\n    msg.payload[0].dateValid = false;\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "83a5cb90f14980f0"
            ]
        ]
    },
    {
        "id": "83a5cb90f14980f0",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Not expired date",
        "property": "payload[0].dateValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1560,
        "y": 220,
        "wires": [
            [
                "2b05c5c0238015a1"
            ],
            [
                "bdd0057d14224519"
            ]
        ]
    },
    {
        "id": "8a4c63dd0b81efbc",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare authorized response",
        "func": "msg.payload = {\n    plate: msg.payload.plate,\n    authorized: true,\n    model: msg.payload.carModel,\n    color: msg.payload.carColor\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 220,
        "wires": [
            [
                "4a0142c965826c0f"
            ]
        ]
    },
    {
        "id": "5d542dd290636100",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "Get plate model",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2040,
        "y": 220,
        "wires": [
            [
                "17f401b1d462dbe0"
            ]
        ]
    },
    {
        "id": "2b05c5c0238015a1",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Prepare model request",
        "func": "msg.url = \"http://plate-api:80/plate/info?plateId=\" + msg.payload[0].plate\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 220,
        "wires": [
            [
                "5d542dd290636100"
            ]
        ]
    },
    {
        "id": "17f401b1d462dbe0",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Format response",
        "func": "msg.payload = JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "8a4c63dd0b81efbc"
            ]
        ]
    },
    {
        "id": "fbb8a647422d5e27",
        "type": "postgreSQLConfig",
        "name": "",
        "host": "database",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "bfc",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "user",
        "userFieldType": "str",
        "password": "password",
        "passwordFieldType": "str"
    }
]